import argparse
import time
import os
import sys
from datetime import datetime

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from tender_parser import parse_tender_excel
from utils import extract_products_from_excel

def show_banner():
    banner = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üîç –ü–∞—Ä—Å–µ—Ä –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç - Microsoft Edge                                   ‚ïë
‚ïë                                                                              ‚ïë
‚ïë üí∞ –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ ‚Ä¢ üè∑Ô∏è –¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã ‚Ä¢ üíº –¶–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü                   ‚ïë
‚ïë üöó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π msedgedriver.exe                                   ‚ïë
‚ïë üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ ds-valueLine –ø–æ –ø–æ—Ä—è–¥–∫—É (1-–π, 2-–π, 3-–π)                   ‚ïë
‚ïë üç™ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Edge cookies                                ‚ïë
‚ïë                                                                              ‚ïë
‚ïë –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def check_edge_driver():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ msedgedriver –≤ PATH/ENV/–ª–æ–∫–∞–ª—å–Ω–æ (Linux/Windows)."""
    # 1) –ê—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ–∑–∂–µ, –∑–¥–µ—Å—å –æ–±—â–∏–π –ø–æ–∏—Å–∫
    candidates = [
        os.path.join("browserdriver", "msedgedriver"),
        os.path.join("browserdriver", "msedgedriver.exe"),
    ]

    found = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_driver = os.environ.get("MSEDGEDRIVER")
    if env_driver and os.path.exists(env_driver):
        found = env_driver

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PATH
    if not found:
        try:
            import shutil as _shutil
            which_path = _shutil.which("msedgedriver")
            if which_path:
                found = which_path
        except Exception:
            pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    if not found:
        for c in candidates:
            if os.path.exists(c):
                found = c
                break

    if found:
        print(f"‚úÖ Edge WebDriver –Ω–∞–π–¥–µ–Ω: {found}")
        return True
    else:
        print("‚ùå Edge WebDriver –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üîé –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –≤: PATH, $MSEDGEDRIVER –∏ ./browserdriver/")
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ msedgedriver, –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ --driver-path")
        return False

def check_cookies():
    cookies_file = os.path.expanduser("~/.yandex_parser_auth/cookies.json")
    if os.path.exists(cookies_file):
        file_size = os.path.getsize(cookies_file)
        print(f"‚úÖ Cookies –¥–ª—è —é—Ä–ª–∏—Ü –Ω–∞–π–¥–µ–Ω—ã: {cookies_file} ({file_size} –±–∞–π—Ç)")
        return True
    else:
        print(f"‚ùå Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {cookies_file}")
        return False

def check_gui_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ GUI –º–æ–¥—É–ª–µ–π"""
    try:
        import tkinter
        print("‚úÖ GUI –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
    except ImportError:
        print("‚ùå tkinter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_multiprocessing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""
    try:
        import multiprocessing
        print("‚úÖ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return True
    except:
        print("‚ùå –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return False

def main():
    show_banner()
    
    parser = argparse.ArgumentParser(description="–ü–∞—Ä—Å–µ—Ä —Ü–µ–Ω –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç")
    parser.add_argument("input_file", nargs="?", default="tender_list.xlsx")
    parser.add_argument("-o", "--output", default="auto")
    parser.add_argument("--gui", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    parser.add_argument("--workers", type=int, default=2)
    parser.add_argument("--no-headless", action="store_true")
    parser.add_argument("--driver-path", default=None)
    parser.add_argument("--auth", action="store_true")
    parser.add_argument("--no-auto-save", action="store_true")
    
    args = parser.parse_args()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    if not check_edge_driver():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: Edge WebDriver –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 1
    
    if args.auth:
        print("\nüîê –†–µ–∂–∏–º: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ü–µ–Ω")
        if not check_cookies():
            print("‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã")

    if args.gui:
        print("\nüñ•Ô∏è –ó–∞–ø—É—Å–∫–∞—é GUI...")

        if not check_gui_modules():
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å GUI –º–æ–¥—É–ª–∏")
            return 1
        
        if not check_multiprocessing():
            print("‚ö†Ô∏è –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        try:
            from gui_parser import ParserGUI
            import tkinter as tk
            
            root = tk.Tk()
            app = ParserGUI(root)
            print("‚úÖ GUI –∑–∞–ø—É—â–µ–Ω")
            root.mainloop()
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ gui_parser: {e}")
            return 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GUI: {e}")
            import traceback
            traceback.print_exc()
            return 1
        
        return 0
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüîç –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º...")
    
    if not os.path.exists(args.input_file):
        print(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input_file}")
        return 1
    
    try:
        products_df = extract_products_from_excel(args.input_file)
        if products_df.empty:
            print(f"‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ: {args.input_file}")
            return 1
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_df)}")
        
        for i, name in enumerate(products_df['name'].head(3), 1):
            short_name = name[:50] + "..." if len(name) > 50 else name
            print(f"  {i}. {short_name}")
        
        if args.output == "auto":
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            auth_suffix = "_auth" if args.auth else ""
            output_file = f"results_{args.workers}workers{auth_suffix}_{timestamp}.xlsx"
        else:
            output_file = args.output
        
        headless = not args.no_headless
        auto_save = not args.no_auto_save
        
        print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  üßµ –ü–æ—Ç–æ–∫–æ–≤: {args.workers}")
        print(f"  üëÅÔ∏è –†–µ–∂–∏–º: {'—Å–∫—Ä—ã—Ç—ã–π' if headless else '–≤–∏–¥–∏–º—ã–π'}")
        print(f"  üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–¥–∞' if args.auth else '–Ω–µ—Ç'}")
        print(f"  üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'–¥–∞' if auto_save else '–Ω–µ—Ç'}")
        print(f"  üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
        start_time = time.time()
        
        result_df = parse_tender_excel(
            args.input_file,
            output_file,
            headless=headless,
            workers=args.workers,
            driver_path=args.driver_path,
            auto_save=auto_save,
            use_business_auth=args.auth
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        total = len(result_df)
        regular_count = len([r for r in result_df['—Ü–µ–Ω–∞'] if r and r != '–û–®–ò–ë–ö–ê'])
        
        print(f"\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {duration:.1f} —Å–µ–∫")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}")
        print(f"  üí∞ –û–±—ã—á–Ω—ã—Ö —Ü–µ–Ω: {regular_count}")
        
        if args.auth:
            business_count = len([r for r in result_df.get('—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü', []) if r and r != '–û–®–ò–ë–ö–ê'])
            print(f"  üíº –¶–µ–Ω –¥–ª—è —é—Ä–ª–∏—Ü: {business_count}")
        
        print(f"  üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_file}")
        
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = main()
    if os.name == 'nt':
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(exit_code)
