# tender_parser.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å —Ç–µ–Ω–¥–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º

import time
import logging
import json
import re
import tempfile
import shutil
import uuid
import atexit
import signal
import os
from typing import Dict, Optional, List, Any, Tuple
import pandas as pd
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import StaleElementReferenceException, TimeoutException, WebDriverException
from utils import extract_products_from_excel, save_results_into_tender_format

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
STOP_PARSING = False
CREATED_PROFILES = set()
CURRENT_DATAFRAME = None
CURRENT_OUTPUT_FILE = None
CURRENT_INPUT_FILE = None

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    def signal_handler(signum, frame):
        global STOP_PARSING
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ({signum}), –≤—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
        STOP_PARSING = True
        force_save_results()
        cleanup_profiles()
        logger.info("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        os._exit(0)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Windows –∏ Unix
    try:
        signal.signal(signal.SIGINT, signal_handler)   # Ctrl+C
        signal.signal(signal.SIGTERM, signal_handler)  # Terminate
        if hasattr(signal, 'SIGBREAK'):  # Windows
            signal.signal(signal.SIGBREAK, signal_handler)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

def force_save_results():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global CURRENT_DATAFRAME, CURRENT_OUTPUT_FILE, CURRENT_INPUT_FILE

    if CURRENT_DATAFRAME is not None and CURRENT_OUTPUT_FILE and CURRENT_INPUT_FILE:
        try:
            # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            processed = len([r for r in CURRENT_DATAFRAME['—Ü–µ–Ω–∞'] if r and r not in ['', '–û–®–ò–ë–ö–ê']])
            total = len(CURRENT_DATAFRAME)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –¢–ï–ù–î–ï–†–ù–û–ì–û –§–û–†–ú–ê–¢–ê
            save_results_into_tender_format(CURRENT_INPUT_FILE, CURRENT_OUTPUT_FILE, CURRENT_DATAFRAME)
            logger.info(f"üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–ï–ù–î–ï–†–ê: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{total} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {CURRENT_OUTPUT_FILE}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    else:
        logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

def stop_all_parsing():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    global STOP_PARSING
    STOP_PARSING = True
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")

def cleanup_single_profile(profile_path: str) -> bool:
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—á–∏—â–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å Edge –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞"""
    if not profile_path or not os.path.exists(profile_path):
        return False

    try:
        time.sleep(0.3)

        try:
            import psutil
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] and 'msedge' in proc.info['name'].lower():
                        if proc.info['cmdline']:
                            cmdline = ' '.join(proc.info['cmdline'])
                            if profile_path in cmdline:
                                return False
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
        except ImportError:
            time.sleep(0.5)

        shutil.rmtree(profile_path, ignore_errors=True)
        success = not os.path.exists(profile_path)

        return success

    except Exception as e:
        return False

def cleanup_profiles():
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    global CREATED_PROFILES
    cleanup_count = 0
    for profile_path in CREATED_PROFILES.copy():
        try:
            if os.path.exists(profile_path):
                shutil.rmtree(profile_path, ignore_errors=True)
                cleanup_count += 1
        except:
            pass
    CREATED_PROFILES.clear()
    if cleanup_count > 0:
        logger.info(f"–û—á–∏—â–µ–Ω–æ {cleanup_count} –ø—Ä–æ—Ñ–∏–ª–µ–π Edge")

atexit.register(cleanup_profiles)

def kill_zombie_edges():
    """–£–±–∏–≤–∞–µ—Ç Edge –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    print("–ó–∞–∫—Ä—ã–≤–∞—é Edge –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    try:
        import psutil
        killed_count = 0
        for p in psutil.process_iter(['pid', 'name']):
            if p.info['name'] and 'msedge' in p.info['name'].lower():
                try:
                    p.terminate()
                    killed_count += 1
                except:
                    pass
        if killed_count > 0:
            print(f"–ó–∞–∫—Ä—ã—Ç–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    except:
        pass

def create_driver(headless: bool = True, driver_path: Optional[str] = None, use_auth: bool = False) -> webdriver.Edge:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Edge –¥—Ä–∞–π–≤–µ—Ä–∞"""
    global CREATED_PROFILES
    options = webdriver.EdgeOptions()

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage") 
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-plugins")
    options.add_argument("--disable-web-security")
    options.add_argument("--disable-features=VizDisplayCompositor")
    options.add_argument("--no-default-browser-check")
    options.add_argument("--no-first-run")
    options.add_argument("--disable-default-apps")
    options.add_argument("--disable-sync")
    options.add_argument("--disable-logging")
    options.add_argument("--log-level=3")
    options.add_argument("--silent")
    options.add_argument("--page-load-strategy=eager")
    options.add_argument("--disable-images")

    profile_dir = None
    if use_auth:
        from pathlib import Path
        timestamp = int(time.time() * 1000)
        worker_id = uuid.uuid4().hex[:8]
        app_dir = Path.home() / ".yandex_parser_auth"
        app_dir.mkdir(exist_ok=True)
        profile_dir = app_dir / f"edge_profile_{worker_id}_{timestamp}"
        profile_dir.mkdir(parents=True, exist_ok=True)
        options.add_argument(f"--user-data-dir={profile_dir}")
        # –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å
        options.add_argument("--disable-features=AutofillServerCommunication")
        CREATED_PROFILES.add(str(profile_dir))
        logger.debug(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {profile_dir}")
    else:
        temp_dir = tempfile.mkdtemp(prefix=f"edge_temp_{uuid.uuid4().hex[:8]}_")
        options.add_argument(f"--user-data-dir={temp_dir}")
        CREATED_PROFILES.add(temp_dir)

    if headless:
        options.add_argument("--headless=new")
        options.add_argument("--window-size=1024,600")

    try:
        if driver_path:
            edge_driver_path = driver_path
        else:
            edge_driver_path = os.path.join("browserdriver", "msedgedriver.exe")

        if not os.path.exists(edge_driver_path):
            raise FileNotFoundError(f"Edge WebDriver –Ω–µ –Ω–∞–π–¥–µ–Ω: {edge_driver_path}")

        service = Service(edge_driver_path)
        driver = webdriver.Edge(service=service, options=options)

        driver.set_page_load_timeout(15)
        driver.implicitly_wait(3)

        return driver

    except Exception as e:
        if profile_dir and str(profile_dir) in CREATED_PROFILES:
            try:
                shutil.rmtree(profile_dir, ignore_errors=True)
                CREATED_PROFILES.discard(str(profile_dir))
            except:
                pass
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Edge –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
        raise

def load_cookies_for_auth(driver):
    """–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ cookies - –°–ù–ê–ß–ê–õ–ê yandex.ru, –ü–û–¢–û–ú market.yandex.ru"""
    if STOP_PARSING:
        return False

    cookies_file = os.path.expanduser("~/.yandex_parser_auth/cookies.json")
    if not os.path.exists(cookies_file):
        logger.warning(f"–§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω: {cookies_file}")
        return False

    try:
        with open(cookies_file, 'r', encoding='utf-8') as f:
            cookies_data = json.loads(f.read().strip())

        if isinstance(cookies_data, list):
            cookies = cookies_data
        elif isinstance(cookies_data, dict) and 'cookies' in cookies_data:
            cookies = cookies_data['cookies']
        else:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookies —Ñ–∞–π–ª–∞")
            return False

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(cookies)} cookies –≤ —Ñ–∞–π–ª–µ")

        # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ yandex.ru –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤—ã—Ö cookies
        logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ yandex.ru –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cookies...")
        driver.get("https://yandex.ru")
        time.sleep(2)  # –î–∞—ë–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        
        loaded_count = 0
        error_count = 0
        important_cookies_loaded = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï cookies –Ω–∞ yandex.ru
        for i, cookie in enumerate(cookies):
            if STOP_PARSING:
                break
            try:
                if not isinstance(cookie, dict) or 'name' not in cookie or 'value' not in cookie:
                    logger.debug(f"Cookie {i}: –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç name –∏–ª–∏ value)")
                    continue

                clean_cookie = {
                    'name': str(cookie['name']),
                    'value': str(cookie['value']),
                    'path': str(cookie.get('path', '/'))
                }

                # –í–ê–ñ–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ domain
                if 'domain' in cookie:
                    domain = str(cookie['domain'])
                    # –£–±–∏—Ä–∞–µ–º –ª–∏–¥–∏—Ä—É—é—â—É—é —Ç–æ—á–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                    if domain.startswith('.'):
                        domain = domain[1:]
                    clean_cookie['domain'] = domain
                
                if cookie.get('secure', False):
                    clean_cookie['secure'] = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º sameSite –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'sameSite' in cookie:
                    clean_cookie['sameSite'] = str(cookie['sameSite'])

                driver.add_cookie(clean_cookie)
                loaded_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ cookies
                if cookie['name'] in ['Session_id', 'sessionid2', 'yandexuid', 'i', 'yandex_login']:
                    important_cookies_loaded.append(cookie['name'])
                    logger.debug(f"‚úì –í–∞–∂–Ω—ã–π cookie –∑–∞–≥—Ä—É–∂–µ–Ω: {cookie['name']}")
                    
            except Exception as e:
                error_count += 1
                logger.debug(f"Cookie {i} ({cookie.get('name', '?')}): –æ—à–∏–±–∫–∞ - {e}")
                continue

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ cookies: {loaded_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
        if important_cookies_loaded:
            logger.info(f"–í–∞–∂–Ω—ã–µ cookies: {', '.join(important_cookies_loaded)}")

        if loaded_count > 0:
            # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ market.yandex.ru –° –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ú–ò cookies
            logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ market.yandex.ru —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ cookies...")
            driver.get("https://market.yandex.ru")
            time.sleep(2)  # –î–∞—ë–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
            page_source = driver.page_source.lower()
            if '–¥–ª—è —é—Ä–ª–∏—Ü' in page_source or '–¥–ª—è –±–∏–∑–Ω–µ—Å–∞' in page_source:
                logger.info("‚úì –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞!")
                return True
            else:
                logger.warning("‚ö† –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª–∞—Å—å - –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞")
                logger.warning("   –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É, –Ω–æ —Ü–µ–Ω—ã –¥–ª—è —é—Ä–ª–∏—Ü –º–æ–≥—É—Ç –Ω–µ –ø–æ—è–≤–∏—Ç—å—Å—è")
                return True  # –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        else:
            logger.error("–ù–∏ –æ–¥–∏–Ω cookie –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
        import traceback
        traceback.print_exc()
        return False

def extract_prices_fast(driver):
    """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω: –º–∞—Å—Å–æ–≤–æ —Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 4 ds.valueLine + –ø–æ–¥–ø–∏—Å–∏"""
    price_data = {
        '–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞': '',
        '—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü': ''
    }

    if STOP_PARSING:
        return price_data

    try:
        logger.debug("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞...")


        script = """
        var result = {
            prices: [],
            labels: []
        };

        var valuelines = document.querySelectorAll("span.ds-valueLine");
        var targetElements = Array.from(valuelines).slice(0, 4);

        for (var i = 0; i < targetElements.length; i++) {
            var element = targetElements[i];
            var priceText = element.textContent.trim();
            result.prices.push(priceText);

            // –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–µ–π –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            var labelText = "";
            var parent = element.parentElement;

            if (parent && parent.parentElement) {
                var textLines = parent.parentElement.querySelectorAll(".ds-textLine");
                for (var j = 0; j < Math.min(textLines.length, 3); j++) {
                    var text = textLines[j].textContent.trim().toLowerCase();
                    if (text && text.length < 25) {
                        labelText = text;
                        break;
                    }
                }
            }

            result.labels.push(labelText);
        }

        return result;
        """

        try:
            bulk_data = driver.execute_script(script)
        except Exception as e:
            logger.warning(f"JavaScript –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
            # Fallback
            all_valuelines = driver.find_elements(By.CSS_SELECTOR, "span.ds-valueLine")
            target_valuelines = all_valuelines[:4] if all_valuelines else []

            if not target_valuelines:
                return price_data

            bulk_data = {'prices': [], 'labels': []}
            for valueline in target_valuelines:
                bulk_data['prices'].append(valueline.text.strip())
                bulk_data['labels'].append("")

        if not bulk_data or not bulk_data.get('prices'):
            return price_data

        prices = bulk_data['prices']
        labels = bulk_data['labels']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        prices_with_labels = []
        for i, (price_text, label_text) in enumerate(zip(prices, labels)):
            prices_with_labels.append({
                'text': price_text,
                'label': label_text.lower(),
                'index': i + 1
            })

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–æ–¥–ø–∏—Å—è–º
        regular_found = False
        vat_found = False

        # 1. –ò—â–µ–º "–ø—ç–π" –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã
        for item in prices_with_labels:
            if '–ø—ç–π' in item['label'] or 'pay' in item['label']:
                price_data['–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞'] = item['text']
                regular_found = True
                break

        # 2. –ò—â–µ–º "—Å –ù–î–°" –¥–ª—è —é—Ä–ª–∏—Ü
        for item in prices_with_labels:
            if '—Å –Ω–¥—Å' in item['label'] or '–Ω–¥—Å' in item['label'] or '–¥–ª—è —é—Ä–ª–∏—Ü' in item['label']:
                price_data['—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü'] = item['text']
                vat_found = True
                break

        # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ "–ø—ç–π" ‚Üí –ø–µ—Ä–≤–∞—è —Ü–µ–Ω–∞ –∫–∞–∫ –æ–±—ã—á–Ω–∞—è
        if not regular_found and prices_with_labels:
            price_data['–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞'] = prices_with_labels[0]['text']

        return price_data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        return price_data

def extract_products_smart(driver) -> List[Dict[str, Any]]:
    products = []

    try:
        script = """
        var products = [];

        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var cards = document.querySelectorAll('span[role="link"][data-auto="snippet-title"]');

        for (var i = 0; i < Math.min(10, cards.length); i++) {
            var card = cards[i];
            var title = card.textContent.trim();
            if (!title) continue;

            // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            var url = null;
            var parent = card;
            for (var j = 0; j < 5; j++) {
                if (parent.tagName === 'A' && parent.href) {
                    url = parent.href;
                    break;
                }
                parent = parent.parentElement;
                if (!parent) break;
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö, –∏—â–µ–º –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            if (!url) {
                var links = card.parentElement ? card.parentElement.querySelectorAll('a[href]') : [];
                if (links.length > 0) {
                    url = links[0].href;
                }
            }

            products.push({
                title: title,
                url: url,
                index: i
            });
        }

        return products;
        """

        products_data = driver.execute_script(script)

        if products_data:
            products = [
                {
                    'title': p['title'],
                    'url': p['url'],
                    'index': p['index']
                }
                for p in products_data[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ä—Ç–æ—á–µ–∫
            ]

        if products:
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            return products

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")

    return products

def parse_price_to_number(price_str: str) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not price_str:
        return float('inf')  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–Ω

    try:
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫
        clean_price = re.sub(r'[^\d,.]', '', price_str)

        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è float
        clean_price = clean_price.replace(',', '.')

        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é)
        if clean_price.count('.') > 1:
            parts = clean_price.split('.')
            clean_price = ''.join(parts[:-1]) + '.' + parts[-1]

        return float(clean_price) if clean_price else float('inf')
    except:
        return float('inf')

def collect_prices_from_all_products(driver, products: List[Dict[str, Any]], search_term: str) -> Dict[str, str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ü–µ–Ω—ã —Å–æ –í–°–ï–• 5 –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ù–ê–ò–ú–ï–ù–¨–®–£–Æ"""
    result = {"—Ü–µ–Ω–∞": "", "—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü": "", "—Å—Å—ã–ª–∫–∞": ""}

    if not products:
        logger.warning("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return result

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–µ–Ω
    all_products_data = []

    logger.info(f"–°–æ–±–∏—Ä–∞—é —Ü–µ–Ω—ã —Å {len(products)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –í–°–ï–ú —Ç–æ–≤–∞—Ä–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã
    for i, product in enumerate(products, 1):
        if STOP_PARSING:
            break

        if not product.get('url'):
            logger.debug(f"–¢–æ–≤–∞—Ä {i}: –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–ø—É—Å–∫")
            continue

        try:
            short_title = product['title'][:45] + "..." if len(product['title']) > 45 else product['title']
            logger.info(f"  {i}. {short_title}")

            # –ë–ï–ó–û–ü–ê–°–ù–´–ô –ø–µ—Ä–µ—Ö–æ–¥ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç stale elements
            for retry in range(2):
                try:
                    driver.get(product['url'])
                    time.sleep(1.2)
                    break
                except (WebDriverException, TimeoutException):
                    if retry == 1:
                        logger.warning(f"     –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞")
                        break
                    time.sleep(1)
                    continue

            if STOP_PARSING:
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                WebDriverWait(driver, 5).until(
                    lambda d: d.execute_script("return document.readyState") == "complete"
                )
            except:
                pass

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
            prices = extract_prices_fast(driver)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ü–µ–Ω–∞–º–∏
            product_data = {
                'title': product['title'],
                'url': product['url'],
                'index': i,
                '–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞': prices.get('–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞', ''),
                '—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü': prices.get('—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü', ''),
                'regular_price_num': parse_price_to_number(prices.get('–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞', '')),
                'vat_price_num': parse_price_to_number(prices.get('—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü', ''))
            }

            all_products_data.append(product_data)

            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –Ω–∞—à–ª–∏
            price_info = []
            if prices.get('–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞'):
                price_info.append(f"–û–±—ã—á–Ω–∞—è: {prices['–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞']}")
            if prices.get('—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü'):
                price_info.append(f"–Æ—Ä–ª–∏—Ü–∞: {prices['—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü']}")

            if price_info:
                logger.info(f"     {', '.join(price_info)}")
            else:
                logger.info(f"     —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except StaleElementReferenceException as e:
            logger.warning(f"     StaleElement –æ—à–∏–±–∫–∞")
            continue
        except Exception as e:
            logger.warning(f"     –û—à–∏–±–∫–∞: {e}")
            continue

    if not all_products_data:
        logger.warning("–ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        return result

    # –í–´–ë–ò–†–ê–ï–ú —Ç–æ–≤–∞—Ä —Å –ù–ê–ò–ú–ï–ù–¨–®–ï–ô –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω–æ–π
    valid_products = [p for p in all_products_data if p['regular_price_num'] != float('inf')]

    if valid_products:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
        best_product = min(valid_products, key=lambda x: x['regular_price_num'])

        result["—Ü–µ–Ω–∞"] = best_product['–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞']
        result["—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü"] = best_product['—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü']
        result["—Å—Å—ã–ª–∫–∞"] = best_product['url']

        logger.info(f"–õ–£–ß–®–ò–ô –í–´–ë–û–†: —Ç–æ–≤–∞—Ä {best_product['index']} - {best_product['–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞']}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω
        logger.info("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω:")
        for p in sorted(all_products_data, key=lambda x: x['regular_price_num']):
            if p['regular_price_num'] != float('inf'):
                marker = "‚Üí –í–´–ë–†–ê–ù" if p == best_product else ""
                logger.info(f"  –¢–æ–≤–∞—Ä {p['index']}: {p['–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞']} {marker}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö —Ü–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä —Å –ª—é–±—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        first_product = all_products_data[0]
        result["—Ü–µ–Ω–∞"] = first_product['–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞']
        result["—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü"] = first_product['—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü']
        result["—Å—Å—ã–ª–∫–∞"] = first_product['url']

        logger.warning("–û–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–∑—è—Ç –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä")

    return result

def smart_search_input(driver, search_term: str, max_retries: int = 3) -> bool:
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    current_url = driver.current_url

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞
    if 'search' in current_url and 'text=' in current_url:
        logger.debug("–£–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å")
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return update_search_query(driver, search_term, max_retries)
    else:
        logger.debug("–ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return perform_new_search(driver, search_term, max_retries)

def update_search_query(driver, search_term: str, max_retries: int = 3) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

    for retry in range(max_retries):
        if STOP_PARSING:
            return False

        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(driver, 3).until(
                lambda d: d.execute_script("return document.readyState") == "complete"
            )

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            search_selectors = [
                'input[name="text"]',
                'input[data-auto="search-input"]',
                'input[placeholder*="–∏—Å–∫–∞—Ç—å"]',
                'input[placeholder*="–ø–æ–∏—Å–∫"]',
                '.search-input input',
                '.header-search input',
                '[data-zone="search"] input',
                'input.n-search__input',
                'input[type="search"]'
            ]

            searchbox = None
            for selector in search_selectors:
                try:
                    searchbox = WebDriverWait(driver, 2).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞: {selector}")
                    break
                except TimeoutException:
                    continue

            if not searchbox:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retry + 1}: –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                if retry < max_retries - 1:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    driver.get("https://market.yandex.ru")
                    time.sleep(1)
                    continue
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            try:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
                searchbox.clear()
                time.sleep(0.3)

                # –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                searchbox.send_keys(search_term[:50])
                time.sleep(0.3)
                searchbox.send_keys(Keys.RETURN)
                time.sleep(1.5)
                return True

            except StaleElementReferenceException:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retry + 1}: StaleElement –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
                if retry < max_retries - 1:
                    time.sleep(1)
                    continue
                return False

        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retry + 1} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if retry < max_retries - 1:
                time.sleep(1)
                continue
            return False

    return False

def perform_new_search(driver, search_term: str, max_retries: int = 3) -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    for retry in range(max_retries):
        if STOP_PARSING:
            return False

        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(driver, 5).until(
                lambda d: d.execute_script("return document.readyState") == "complete"
            )

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            searchbox = None
            wait = WebDriverWait(driver, 5)

            for selector_type, selector in [
                (By.NAME, "text"),
                (By.CSS_SELECTOR, "input[name='text']"),
                (By.CSS_SELECTOR, "[data-auto='search-input']")
            ]:
                try:
                    searchbox = wait.until(EC.element_to_be_clickable((selector_type, selector)))
                    break
                except TimeoutException:
                    continue

            if not searchbox:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retry + 1}: –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π")
                if retry < max_retries - 1:
                    time.sleep(1)
                    continue
                return False

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            try:
                searchbox.clear()
                searchbox.send_keys(search_term[:50])
                searchbox.send_keys(Keys.RETURN)
                time.sleep(1.5)
                return True

            except StaleElementReferenceException:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retry + 1}: StaleElement –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ")
                if retry < max_retries - 1:
                    time.sleep(1)
                    continue
                return False

        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retry + 1} –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            if retry < max_retries - 1:
                time.sleep(1)
                continue
            return False

    return False

def get_prices(product_name: str, headless: bool = True, driver_path: Optional[str] = None,
              timeout: int = 15, use_business_auth: bool = False) -> Dict[str, str]:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–∏–º–µ–Ω—å—à–µ–π –∏–∑ 5 –∫–∞—Ä—Ç–æ—á–µ–∫"""
    result = {"—Ü–µ–Ω–∞": "", "—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü": "", "—Å—Å—ã–ª–∫–∞": ""}
    driver = None
    current_profile_path = None

    if STOP_PARSING:
        return result

    try:
        driver = create_driver(headless=headless, driver_path=driver_path, use_auth=use_business_auth)

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if use_business_auth:
            for profile_path in CREATED_PROFILES:
                if 'edge_profile_' in profile_path:
                    current_profile_path = profile_path
                    break
        else:
            for profile_path in CREATED_PROFILES:
                if 'edge_temp_' in profile_path:
                    current_profile_path = profile_path
                    break

        # –ó–∞–≥—Ä—É–∑–∫–∞ cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if use_business_auth and not STOP_PARSING:
            auth_success = load_cookies_for_auth(driver)
            if auth_success:
                logger.info("‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            else:
                logger.warning("‚ö† –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –Ω–µ—ë")
            # load_cookies_for_auth —É–∂–µ –ø–µ—Ä–µ—à—ë–ª –Ω–∞ market.yandex.ru
        else:
            # –ï—Å–ª–∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –º–∞—Ä–∫–µ—Ç –≤—Ä—É—á–Ω—É—é
            if STOP_PARSING:
                return result
            try:
                driver.get("https://market.yandex.ru")
                time.sleep(1.0)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç: {e}")
                return result

        if STOP_PARSING:
            return result

        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        search_success = smart_search_input(driver, product_name)
        if not search_success:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫")
            return result

        if STOP_PARSING:
            return result

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        products = extract_products_smart(driver)
        if not products:
            logger.warning("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return result

        if STOP_PARSING:
            return result

        # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã —Å–æ –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ù–ê–ò–ú–ï–ù–¨–®–£–Æ
        result = collect_prices_from_all_products(driver, products, product_name)

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_name[:30]}...: {e}")
        return result

    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        if current_profile_path:
            success = cleanup_single_profile(current_profile_path)
            if success:
                CREATED_PROFILES.discard(current_profile_path)

def parse_tender_excel(input_file: str, output_file: str, headless: bool = True,
                      workers: int = 1, driver_path: Optional[str] = None,
                      auto_save: bool = True, use_business_auth: bool = False) -> pd.DataFrame:
    """–û–°–ù–û–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –¢–ï–ù–î–ï–†–ù–´–ú –§–û–†–ú–ê–¢–û–ú"""
    global STOP_PARSING, CURRENT_DATAFRAME, CURRENT_OUTPUT_FILE, CURRENT_INPUT_FILE

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    setup_signal_handlers()

    STOP_PARSING = False
    CURRENT_INPUT_FILE = input_file
    CURRENT_OUTPUT_FILE = output_file

    kill_zombie_edges()

    items = extract_products_from_excel(input_file)
    if items.empty:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª–µ")

    # DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
    df = pd.DataFrame({
        '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': items['name'],
        '—Ü–µ–Ω–∞': '',
        '—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü': '',
        '—Å—Å—ã–ª–∫–∞': ''
    })

    CURRENT_DATAFRAME = df  # –î–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    auth_text = "—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π" if use_business_auth else "–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(df)} —Ç–æ–≤–∞—Ä–æ–≤ {auth_text}")
    logger.info("üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ê–ö–¢–ò–í–ù–û")
    logger.info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢: —Ç–µ–Ω–¥–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π '–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç'")
    logger.info("–†–µ–∂–∏–º: –ø–æ–∏—Å–∫ –Ω–∞–∏–º–µ–Ω—å—à–µ–π —Ü–µ–Ω—ã —Å—Ä–µ–¥–∏ 5 –∫–∞—Ä—Ç–æ—á–µ–∫")

    try:
        for idx, row in df.iterrows():
            if STOP_PARSING:
                logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break

            try:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {idx + 1}/{len(df)} - {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'][:40]}...")

                prices = get_prices(row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'], headless, driver_path, 20, use_business_auth)

                df.at[idx, '—Ü–µ–Ω–∞'] = prices.get('—Ü–µ–Ω–∞', '')
                df.at[idx, '—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü'] = prices.get('—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü', '')
                df.at[idx, '—Å—Å—ã–ª–∫–∞'] = prices.get('—Å—Å—ã–ª–∫–∞', '')

                # –õ–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                price_summary = []
                if prices.get('—Ü–µ–Ω–∞'):
                    price_summary.append(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞: {prices['—Ü–µ–Ω–∞'][:15]}")
                if prices.get('—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü'):
                    price_summary.append(f"–î–ª—è —é—Ä–ª–∏—Ü: {prices['—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü'][:15]}")

                if price_summary:
                    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {idx + 1}/{len(df)}: {', '.join(price_summary)}")
                else:
                    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {idx + 1}/{len(df)}: —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –í –¢–ï–ù–î–ï–†–ù–û–ú –§–û–†–ú–ê–¢–ï
                if auto_save and (idx + 1) % 3 == 0:
                    try:
                        save_results_into_tender_format(input_file, output_file, df)
                        logger.info(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞: {idx + 1}/{len(df)}")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ {idx + 1}: {e}")
                df.at[idx, '—Ü–µ–Ω–∞'] = "–û–®–ò–ë–ö–ê"
                df.at[idx, '—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü'] = "–û–®–ò–ë–ö–ê"

    finally:
        cleanup_profiles()
        CURRENT_DATAFRAME = None  # –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –í –¢–ï–ù–î–ï–†–ù–û–ú –§–û–†–ú–ê–¢–ï
    if output_file != "auto":
        save_results_into_tender_format(input_file, output_file, df)
        logger.info(f"üéØ –¢–ï–ù–î–ï–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ì–û–¢–û–í–ê: {output_file}")
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∞ —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ + –∫–æ–ª–æ–Ω–∫–∞ '–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç'")

    return df

if __name__ == "__main__":
    test_product = "–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ Ubiquiti UniFi AC Pro AP"
    print("–¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å —Ç–µ–Ω–¥–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º...")
    result = get_prices(test_product, headless=False, use_business_auth=True)

    print(f"–¢–æ–≤–∞—Ä: {test_product}")
    print(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞: {result['—Ü–µ–Ω–∞']}")
    print(f"–¶–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü: {result['—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü'] or '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")
    print(f"–°—Å—ã–ª–∫–∞: {result['—Å—Å—ã–ª–∫–∞']}")
    print("-" * 50)
