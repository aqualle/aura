# utils.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ü–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ (—á–∏—Ç–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)

import pandas as pd
import re
from openpyxl import load_workbook
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
from openpyxl.utils import get_column_letter
from openpyxl.cell.cell import MergedCell
import pickle
from typing import Any
import os
import shutil

def normalize_text(text) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    if not isinstance(text, str):
        return text
    text = text.lower()
    text = re.sub(r'[^a-z–∞-—è0-9\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    return text.strip()

def clean_product_name_advanced(raw_text: str) -> str:
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if not raw_text or not isinstance(raw_text, str):
        return ""
    
    text = raw_text.strip()
    
    remove_patterns = [
        r'–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å\s+–ø–æ—Å—Ç–∞–≤–∫–∏\s+–∞–Ω–∞–ª–æ–≥–æ–≤\s*:\s*\w+',
        r'–≤–∞–ª—é—Ç–∞\s*:\s*\w+',
        r'–µ–¥–∏–Ω–∏—Ü–∞\s+–∏–∑–º–µ—Ä–µ–Ω–∏—è\s*:\s*\w+',
        r'—Å—Ç—Ä–∞–Ω–∞\s+–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è\s*:\s*[^\n]+',
        r'–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å\s*:\s*[^\n]+',
        r'–≥–∞—Ä–∞–Ω—Ç–∏—è\s*:\s*[^\n]+',
        r'—Å—Ä–æ–∫\s+–ø–æ—Å—Ç–∞–≤–∫–∏\s*:\s*[^\n]+',
        r'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\s*:\s*\d+',
        r'—Ü–µ–Ω–∞\s*:\s*[^\n]+',
        r'–∞—Ä—Ç–∏–∫—É–ª\s*:\s*[^\n]+',
        r'–∫–æ–¥\s+—Ç–æ–≤–∞—Ä–∞\s*:\s*[^\n]+',
    ]
    
    for pattern in remove_patterns:
        text = re.sub(pattern, '', text, flags=re.IGNORECASE)
    
    text = re.sub(r'\n+', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    
    exclude_lines = [
        r'^–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', r'^–≤–∞–ª—é—Ç–∞', r'^–µ–¥–∏–Ω–∏—Ü–∞', r'^—Å—Ç—Ä–∞–Ω–∞',
        r'^–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', r'^–≥–∞—Ä–∞–Ω—Ç–∏—è', r'^—Å—Ä–æ–∫', r'^–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        r'^—Ü–µ–Ω–∞', r'^–∞—Ä—Ç–∏–∫—É–ª', r'^–∫–æ–¥\s+—Ç–æ–≤–∞—Ä–∞', r'^\d+\s*$', r'^[a-z]{2,3}\s*$',
    ]
    
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    clean_lines = []
    
    for line in lines:
        is_excluded = False
        for exclude_pattern in exclude_lines:
            if re.match(exclude_pattern, line, re.IGNORECASE):
                is_excluded = True
                break
        if not is_excluded and len(line) > 3:
            clean_lines.append(line)
    
    if clean_lines:
        result = clean_lines[0]
        result = re.sub(r'[^\w\s,.-]', '', result)
        result = re.sub(r'\s+', ' ', result).strip()
        return result
    
    return text

def parse_price_value(price_str: str) -> float:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not price_str or not isinstance(price_str, str):
        return 0.0
    
    try:
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫
        clean_price = re.sub(r'[^\d,.]', '', price_str)
        clean_price = clean_price.replace(',', '.')
        clean_price = clean_price.replace(' ', '')
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        if clean_price.count('.') > 1:
            parts = clean_price.split('.')
            clean_price = ''.join(parts[:-1]) + '.' + parts[-1]
        
        return float(clean_price) if clean_price else 0.0
    except:
        return 0.0

def get_color_by_comparison(yandex_price: float, min_tender_price: float) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —è—á–µ–π–∫–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π —Ü–µ–Ω–æ–π
    
    - –ó–µ–ª–µ–Ω—ã–π: –Ω–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è (—Ü–µ–Ω–∞ –Ø–ú <= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π + 5%)
    - –ñ–µ–ª—Ç—ã–π: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ 5-10%
    - –ö—Ä–∞—Å–Ω—ã–π: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ > 10%
    """
    if min_tender_price == 0 or min_tender_price == float('inf'):
        return "00FF00"  # –ó–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è
    excess_percent = ((yandex_price - min_tender_price) / min_tender_price) * 100
    
    if excess_percent <= 5:
        # –ù–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∏–ª–∏ –¥–æ 5% - –ó–ï–õ–ï–ù–´–ô
        return "00FF00"
    elif excess_percent <= 10:
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ 5-10% - –ñ–ï–õ–¢–´–ô
        return "FFFF00"
    else:
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ > 10% - –ö–†–ê–°–ù–´–ô
        return "FF0000"

def debug_print_excel_rows(path: str, n: int = 50):
    """–û—Ç–ª–∞–¥–∫–∞ - –ø–µ—á–∞—Ç—å –ø–µ—Ä–≤—ã—Ö n —Å—Ç—Ä–æ–∫ Excel"""
    try:
        df = pd.read_excel(path, header=None)
        print(f"üìã –ü–µ—Ä–≤—ã–µ {n} —Å—Ç—Ä–æ–∫ Excel: {path}")
        for i, row in df.head(n).iterrows():
            print(f"{i}: {[str(x) for x in row.tolist()]}")
        print("-" * 60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")

def extract_products_from_excel(path: str):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel"""
    all_sheets = pd.read_excel(path, header=None, sheet_name=None)
    found_df = None
    col_index = None
    start_row = None
    end_row = None
    
    print(f"üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é Excel —Ñ–∞–π–ª: {path}")
    
    for sheet_name, df in all_sheets.items():
        print(f"   –õ–∏—Å—Ç: {sheet_name}")
        for i, row in df.iterrows():
            for j, val in row.items():
                if isinstance(val, str) and '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in val.lower():
                    found_df = df
                    col_index = j
                    start_row = i + 1
                    print(f"   ‚úì –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' –≤ —Å—Ç–æ–ª–±—Ü–µ {j}, —Å—Ç—Ä–æ–∫–∞ {i}")
                    break
            if found_df is not None:
                break
        if found_df is not None:
            break
    
    if found_df is None:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'")
    
    for i, val in enumerate(found_df[col_index]):
        if isinstance(val, str) and '–∏—Ç–æ–≥–æ' in val.lower():
            end_row = i
            break
    
    if end_row is None:
        print("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ '–ò—Ç–æ–≥–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
        end_row = len(found_df)
    
    print(f"üìä –ò–∑–≤–ª–µ–∫–∞—é —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫ {start_row} - {end_row-1}")
    
    items = []
    for idx, text in enumerate(found_df.loc[start_row:end_row - 1, col_index]):
        if not isinstance(text, str):
            continue
        
        raw = text.strip()
        if not raw:
            continue
        
        clean_name = clean_product_name_advanced(raw)
        
        if clean_name and len(clean_name) > 3:
            items.append({
                'raw': raw,
                'name': clean_name
            })
            print(f"   {len(items)}. '{clean_name[:60]}{'...' if len(clean_name) > 60 else ''}'")
            
            if len(items) <= 5:
                if raw != clean_name:
                    print(f"      (–∏—Å—Ö–æ–¥–Ω–æ: '{raw[:40]}{'...' if len(raw) > 40 else ''}')")
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤")
    return pd.DataFrame(items)

def save_results_into_tender_format(original_path: str, output_path: str, df: pd.DataFrame,
                                   target_sheet_name: str = None):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –∏—â–µ—Ç "1 –º–µ—Å—Ç–æ" –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –Ω–∏–º
    """
    print(f"üìã –°–æ–∑–¥–∞—é —Ç–µ–Ω–¥–µ—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–∏—Å–∫–æ–º '1 –º–µ—Å—Ç–æ'...")
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {original_path}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")
    
    try:
        shutil.copy2(original_path, output_path)
        print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
        
        wb = load_workbook(output_path)
        
        if target_sheet_name and target_sheet_name in wb.sheetnames:
            ws = wb[target_sheet_name]
        else:
            ws = wb.active
        
        print(f"üìä –†–∞–±–æ—Ç–∞—é —Å –ª–∏—Å—Ç–æ–º: {ws.title}")
        
        name_col = None
        name_start_row = None
        
        for row_idx in range(1, 21):
            for col_idx in range(1, 11):
                cell = ws.cell(row=row_idx, column=col_idx)
                
                if isinstance(cell, MergedCell):
                    continue
                    
                cell_value = cell.value
                if cell_value and isinstance(cell_value, str) and '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in cell_value.lower():
                    name_col = col_idx
                    name_start_row = row_idx + 1
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': –∫–æ–ª–æ–Ω–∫–∞ {get_column_letter(col_idx)}, —Å—Ç—Ä–æ–∫–∞ {row_idx}")
                    break
            if name_col:
                break
        
        if not name_col:
            raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'")
        
        header_row = name_start_row - 1
        participant_columns = []
        
        for col_idx in range(name_col + 1, min(ws.max_column + 1, name_col + 15)):
            header_cell = ws.cell(row=header_row, column=col_idx)
            
            if isinstance(header_cell, MergedCell):
                continue
                
            header_value = header_cell.value
            if header_value and isinstance(header_value, str) and header_value.strip():
                has_data = False
                for check_row in range(name_start_row, min(name_start_row + 5, ws.max_row + 1)):
                    check_cell = ws.cell(row=check_row, column=col_idx)
                    if not isinstance(check_cell, MergedCell) and check_cell.value:
                        has_data = True
                        break
                
                if has_data:
                    participant_columns.append({
                        'column': col_idx,
                        'name': header_value.strip(),
                        'letter': get_column_letter(col_idx)
                    })
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞: {len(participant_columns)}")
        for p in participant_columns:
            print(f"   - {p['name']} (–∫–æ–ª–æ–Ω–∫–∞ {p['letter']})")
        
        if participant_columns:
            last_participant_col = max([p['column'] for p in participant_columns])
            yandex_col = last_participant_col + 1
        else:
            yandex_col = name_col + 1
        
        yandex_col_letter = get_column_letter(yandex_col)
        print(f"üéØ –ö–æ–ª–æ–Ω–∫–∞ '–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç': {yandex_col_letter}")
        
        header_cell = ws.cell(row=header_row, column=yandex_col)
        
        if not isinstance(header_cell, MergedCell):
            header_cell.value = "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç"
            header_cell.font = Font(bold=True)
            header_cell.alignment = Alignment(horizontal='center', vertical='center')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ {yandex_col_letter}{header_row}")
        else:
            print(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è —è—á–µ–π–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        items_end_row = None
        for row_idx in range(name_start_row, min(ws.max_row + 1, name_start_row + 200)):
            name_cell = ws.cell(row=row_idx, column=name_col)
            if not isinstance(name_cell, MergedCell):
                name_value = name_cell.value
                if name_value and isinstance(name_value, str) and '–∏—Ç–æ–≥–æ' in name_value.lower():
                    items_end_row = row_idx - 1
                    break
        
        if not items_end_row:
            items_end_row = name_start_row + (len(df) * 12) - 1
        
        print(f"üìä –°—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {name_start_row} - {items_end_row}")
        
        # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –≤—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞: 12 —Å—Ç—Ä–æ–∫
        item_height = 12
        
        print(f"üìè –í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞: {item_height} —Å—Ç—Ä–æ–∫ (–§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø)")
        
        def safe_write_cell(row, col, value, font=None, alignment=None, fill=None):
            try:
                cell = ws.cell(row=row, column=col)
                if isinstance(cell, MergedCell):
                    return False
                
                cell.value = value
                if font:
                    cell.font = font
                if alignment:
                    cell.alignment = alignment
                if fill:
                    cell.fill = fill
                return True
            except Exception as e:
                return False
        
        filled_count = 0
        
        for idx, (_, parsed_item) in enumerate(df.iterrows()):
            base_row = name_start_row + (idx * item_height)
            
            if base_row > items_end_row:
                break
            
            price_without_nds = parsed_item.get('—Ü–µ–Ω–∞', '')
            price_with_nds = parsed_item.get('—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü', '')
            link = parsed_item.get('—Å—Å—ã–ª–∫–∞', '')
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ù–î–°
            if not price_with_nds and price_without_nds:
                try:
                    clean_price = re.sub(r'[^\d,.]', '', price_without_nds)
                    clean_price = clean_price.replace(',', '.')
                    price_num = float(clean_price) if clean_price else 0
                    if price_num > 0:
                        price_with_nds_num = price_num * 1.2
                        price_with_nds = f"{price_with_nds_num:,.0f} ‚ÇΩ".replace(',', ' ')
                except:
                    price_with_nds = ""
            
            # –ò–©–ï–ú –ö–û–õ–û–ù–ö–£ –° "1 –ú–ï–°–¢–û" (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç–µ–Ω–¥–µ—Ä–∞)
            winner_col = None
            min_price_without_nds = float('inf')
            min_price_with_nds = float('inf')
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –∏—â–µ–º "1 –º–µ—Å—Ç–æ"
            for participant in participant_columns:
                part_col = participant['column']
                
                # –°—Ç—Ä–æ–∫–∞ 1: "–†–∞–Ω–≥ –ø–æ —Ü–µ–Ω–µ" (base_row + 0)
                rank_row = base_row
                rank_cell = ws.cell(row=rank_row, column=part_col)
                
                if not isinstance(rank_cell, MergedCell):
                    rank_value = rank_cell.value
                    if rank_value and isinstance(rank_value, str):
                        # –ò—â–µ–º "1 –º–µ—Å—Ç–æ" –∏–ª–∏ "3 –º–µ—Å—Ç–æ" –∏ —Ç.–¥.
                        if '1' in rank_value and '–º–µ—Å—Ç–æ' in rank_value.lower():
                            winner_col = part_col
                            print(f"\n   ‚úÖ –ù–ê–ô–î–ï–ù –ü–û–ë–ï–î–ò–¢–ï–õ–¨ '1 –º–µ—Å—Ç–æ': {participant['name']} (–∫–æ–ª–æ–Ω–∫–∞ {participant['letter']})")
                            break
            
            if winner_col is None:
                print(f"\n   ‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å '1 –º–µ—Å—Ç–æ', –∏—â–µ–º –º–∏–Ω–∏–º—É–º –ø–æ –≤—Å–µ–º")
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ "1 –º–µ—Å—Ç–æ", –∏—â–µ–º –º–∏–Ω–∏–º—É–º –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                for participant in participant_columns:
                    part_col = participant['column']
                    
                    # –°—Ç—Ä–æ–∫–∞ 2: –¶–µ–Ω–∞ –ë–ï–ó –ù–î–° (base_row + 1)
                    price_without_nds_row = base_row + 1
                    cell_without_nds = ws.cell(row=price_without_nds_row, column=part_col)
                    
                    if not isinstance(cell_without_nds, MergedCell):
                        cell_value = cell_without_nds.value
                        if cell_value and isinstance(cell_value, (int, float, str)):
                            price_val = parse_price_value(str(cell_value))
                            if price_val > 10 and price_val < 1000000:
                                if price_val < min_price_without_nds:
                                    min_price_without_nds = price_val
                    
                    # –°—Ç—Ä–æ–∫–∞ 3: –¶–µ–Ω–∞ –° –ù–î–° (base_row + 2)
                    price_with_nds_row = base_row + 2
                    cell_with_nds = ws.cell(row=price_with_nds_row, column=part_col)
                    
                    if not isinstance(cell_with_nds, MergedCell):
                        cell_value = cell_with_nds.value
                        if cell_value and isinstance(cell_value, (int, float, str)):
                            price_val = parse_price_value(str(cell_value))
                            if price_val > 10 and price_val < 1000000:
                                if price_val < min_price_with_nds:
                                    min_price_with_nds = price_val
            else:
                # –ß–∏—Ç–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                # –°—Ç—Ä–æ–∫–∞ 2: –¶–µ–Ω–∞ –ë–ï–ó –ù–î–° (base_row + 1)
                price_without_nds_row = base_row + 1
                cell_without_nds = ws.cell(row=price_without_nds_row, column=winner_col)
                
                if not isinstance(cell_without_nds, MergedCell):
                    cell_value = cell_without_nds.value
                    if cell_value and isinstance(cell_value, (int, float, str)):
                        price_val = parse_price_value(str(cell_value))
                        if price_val > 0:
                            min_price_without_nds = price_val
                            print(f"   –¶–µ–Ω–∞ –ë–ï–ó –ù–î–° –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {min_price_without_nds}")
                
                # –°—Ç—Ä–æ–∫–∞ 3: –¶–µ–Ω–∞ –° –ù–î–° (base_row + 2)
                price_with_nds_row = base_row + 2
                cell_with_nds = ws.cell(row=price_with_nds_row, column=winner_col)
                
                if not isinstance(cell_with_nds, MergedCell):
                    cell_value = cell_with_nds.value
                    if cell_value and isinstance(cell_value, (int, float, str)):
                        price_val = parse_price_value(str(cell_value))
                        if price_val > 0:
                            min_price_with_nds = price_val
                            print(f"   –¶–µ–Ω–∞ –° –ù–î–° –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {min_price_with_nds}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if min_price_without_nds == float('inf'):
                min_price_without_nds = 0.0
            if min_price_with_nds == float('inf'):
                min_price_with_nds = 0.0
            
            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç
            yandex_price_without_nds_val = parse_price_value(price_without_nds)
            yandex_price_with_nds_val = parse_price_value(price_with_nds)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —è—á–µ–µ–∫
            color_without_nds = get_color_by_comparison(yandex_price_without_nds_val, min_price_without_nds)
            color_with_nds = get_color_by_comparison(yandex_price_with_nds_val, min_price_with_nds)
            
            print(f"üîÑ –¢–æ–≤–∞—Ä {idx + 1}: {parsed_item['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'][:30]}...")
            print(f"   –¶–µ–Ω–∞ –ë–ï–ó –ù–î–° –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {min_price_without_nds:.2f}")
            print(f"   –¶–µ–Ω–∞ –Ø–ú –ë–ï–ó –ù–î–°: {yandex_price_without_nds_val:.2f} ‚Üí #{color_without_nds}")
            print(f"   –¶–µ–Ω–∞ –° –ù–î–° –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {min_price_with_nds:.2f}")
            print(f"   –¶–µ–Ω–∞ –Ø–ú –° –ù–î–°: {yandex_price_with_nds_val:.2f} ‚Üí #{color_with_nds}")
            
            if price_without_nds or price_with_nds:
                success_count = 0
                
                # –°—Ç—Ä–æ–∫–∞ 2: –¶–µ–Ω–∞ –ë–ï–ó –ù–î–° —Å —Ü–≤–µ—Ç–æ–º
                if price_without_nds:
                    fill_without_nds = PatternFill(start_color=color_without_nds, 
                                                   end_color=color_without_nds, 
                                                   fill_type="solid")
                    if safe_write_cell(base_row + 2, yandex_col, price_without_nds,
                                      alignment=Alignment(horizontal='right'),
                                      fill=fill_without_nds):
                        success_count += 1
                
                # –°—Ç—Ä–æ–∫–∞ 3: –¶–µ–Ω–∞ –° –ù–î–° —Å —Ü–≤–µ—Ç–æ–º
                if price_with_nds:
                    fill_with_nds = PatternFill(start_color=color_with_nds, 
                                               end_color=color_with_nds, 
                                               fill_type="solid")
                    if safe_write_cell(base_row + 3, yandex_col, price_with_nds,
                                      alignment=Alignment(horizontal='right'),
                                      fill=fill_with_nds):
                        success_count += 1
                
                # –°—Ç—Ä–æ–∫–∏ 4-11: –ø—É—Å—Ç–æ
                for offset in range(4, 12):
                    safe_write_cell(base_row + offset, yandex_col, "",
                                   alignment=Alignment(horizontal='center'))
                
                # –°—Ç—Ä–æ–∫–∞ 12: –°–°–´–õ–ö–ê
                if link:
                    link_cell = ws.cell(row=base_row + 12, column=yandex_col)
                    if not isinstance(link_cell, MergedCell):
                        link_cell.value = "–°–°–´–õ–ö–ê"
                        link_cell.hyperlink = link
                        link_cell.font = Font(color="0000FF", underline="single", size=9)
                        link_cell.alignment = Alignment(horizontal='center')
                        success_count += 1
                
                if success_count > 0:
                    filled_count += 1
        
        print(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {filled_count}")
        
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'), 
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        border_count = 0
        for row_idx in range(header_row, items_end_row + 50):
            cell = ws.cell(row=row_idx, column=yandex_col)
            if not isinstance(cell, MergedCell):
                if not cell.border or cell.border == Border():
                    cell.border = thin_border
                    border_count += 1
        
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∫ {border_count} —è—á–µ–π–∫–∞–º")
        
        wb.save(output_path)
        print(f"üíæ –¢–µ–Ω–¥–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
        import traceback
        traceback.print_exc()
        return False

def save_results_into_excel(original_path: str, output_path: str, df: pd.DataFrame,
                           original_sheet_name="Original", prices_sheet_name="Prices"):
    """–°–¢–ê–†–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    
    try:
        original = pd.read_excel(original_path, header=None)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {e}")
        original = pd.DataFrame()
    
    final_df = df[['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '—Ü–µ–Ω–∞', '—Ü–µ–Ω–∞ –¥–ª—è —é—Ä–ª–∏—Ü', '—Å—Å—ã–ª–∫–∞']].copy()
    final_df.columns = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–î–ª—è —é—Ä–ª–∏—Ü', '–°—Å—ã–ª–∫–∞']
    
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        if not original.empty:
            original.to_excel(writer, sheet_name=original_sheet_name, index=False, header=False)
        final_df.to_excel(writer, sheet_name=prices_sheet_name, index=False)
    
    try:
        wb = load_workbook(output_path)
        ws = wb[prices_sheet_name]
        
        if '–°—Å—ã–ª–∫–∞' in final_df.columns:
            link_col = list(final_df.columns).index('–°—Å—ã–ª–∫–∞') + 1
            for row in range(2, ws.max_row + 1):
                url = ws.cell(row=row, column=link_col).value
                if url and isinstance(url, str) and url.strip():
                    cell = ws.cell(row=row, column=link_col)
                    cell.value = url
                    cell.hyperlink = url
                    cell.font = Font(color="0000FF", underline="single")
        
        wb.save(output_path)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")

def save_cookies_pickle(driver, path: str):
    try:
        cookies = driver.get_cookies()
        with open(path, 'wb') as f:
            pickle.dump(cookies, f)
        return True
    except Exception:
        return False

def load_cookies_pickle(driver, path: str, domain_filter: str = None):
    if not os.path.exists(path):
        return False
    
    try:
        with open(path, 'rb') as f:
            cookies = pickle.load(f)
        
        for c in cookies:
            if domain_filter and 'domain' in c and domain_filter not in c['domain']:
                continue
            
            if 'expiry' in c:
                try:
                    c['expiry'] = int(c['expiry'])
                except Exception:
                    c.pop('expiry', None)
            
            try:
                driver.add_cookie(c)
            except Exception:
                continue
        
        return True
    except Exception:
        return False

def check_cookies_validity(cookies_file: str) -> dict:
    result = {
        'exists': False,
        'valid': False,
        'expired': False,
        'size': 0,
        'domains': [],
        'message': ''
    }
    
    if not os.path.exists(cookies_file):
        result['message'] = "–§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return result
    
    result['exists'] = True
    
    try:
        with open(cookies_file, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            result['size'] = len(content)
            
            if not content:
                result['message'] = "–§–∞–π–ª cookies –ø—É—Å—Ç–æ–π"
                return result
            
            import json
            cookies_data = json.loads(content)
            
            if isinstance(cookies_data, list):
                cookies = cookies_data
            elif isinstance(cookies_data, dict) and 'cookies' in cookies_data:
                cookies = cookies_data['cookies']
            else:
                result['message'] = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookies"
                return result
            
            if not cookies:
                result['message'] = "–°–ø–∏—Å–æ–∫ cookies –ø—É—Å—Ç–æ–π"
                return result
            
            domains = set()
            expired_count = 0
            import time
            current_time = time.time()
            
            for cookie in cookies:
                if isinstance(cookie, dict) and 'domain' in cookie:
                    domains.add(cookie['domain'])
                
                if 'expirationDate' in cookie:
                    try:
                        exp_time = float(cookie['expirationDate'])
                        if exp_time < current_time:
                            expired_count += 1
                    except:
                        pass
            
            result['domains'] = list(domains)
            result['valid'] = len(cookies) > 0
            
            if expired_count > len(cookies) * 0.5:
                result['expired'] = True
                result['message'] = f"–ú–Ω–æ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö cookies ({expired_count}/{len(cookies)})"
            else:
                result['message'] = f"Cookies –≤–∞–ª–∏–¥–Ω—ã ({len(cookies)} —à—Ç)"
            
    except Exception as e:
        result['message'] = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ cookies: {e}"
    
    return result
